getPolygonNames <- function(polygonInfo, column){
names <- list()
rowNames <- rownames(polygonInfo)
for(row in 1:nrow(polygonInfo)){
names[[rowNames[row]]] <- toupper(as.character(polygonInfo[row, column]))
}
return(names)
}
removeSep <- function(string, sep){
parts <- strsplit(x=string, split=sep)[[1]]
return(paste(parts, collapse=""))
}
getPolygonCoords <- function(spatialPolygonsDataFrame){
polygonCoords <- list()
polygonCoords[["min"]] <- c(NA, NA)
polygonCoords[["max"]] <- c(NA, NA)
for(i in 1:length(spatialPolygonsDataFrame@polygons)){
polygonCoords[[spatialPolygonsDataFrame@polygons[[i]]@ID]] <-
spatialPolygonsDataFrame@polygons[[i]]@Polygons[[1]]@coords
rangeX <- range(spatialPolygonsDataFrame@polygons[[i]]@Polygons[[1]]@coords[, 1])
rangeY <- range(spatialPolygonsDataFrame@polygons[[i]]@Polygons[[1]]@coords[, 2])
if(is.na(polygonCoords[["min"]][1]) == TRUE ||
rangeX[1] < polygonCoords[["min"]][1]){
polygonCoords[["min"]][1] <- rangeX[1]
}
if(is.na(polygonCoords[["max"]][1]) == TRUE ||
rangeX[2] > polygonCoords[["max"]][1]){
polygonCoords[["max"]][1] <- rangeX[2]
}
if(is.na(polygonCoords[["min"]][2]) == TRUE ||
rangeY[1] < polygonCoords[["min"]][2]){
polygonCoords[["min"]][2] <- rangeY[1]
}
if(is.na(polygonCoords[["max"]][2]) == TRUE ||
rangeY[2] > polygonCoords[["max"]][2]){
polygonCoords[["max"]][2] <- rangeY[2]
}
}
return(polygonCoords)
}
library(maptools) # Read shape file
#slibrary(rgeos) # Polygon centroids
###################################
# Read in ROI counties shape file # https://www.townlands.ie/page/download/
###################################
# Set the path
path <- "/home/josephcrispell/storage/Research/"
# Read in the shape file
file <- paste(path, "ROI_CountyBoundaries/counties.shp", sep="")
countyBorders <- readShapePoly(file) # Generates SpatialPolygonsDataFrame
# Get the coordinates of the counties
countyCoords <- getPolygonCoords(countyBorders)
# Get the county names associated with the coords
countyNames <- getPolygonNames(countyBorders@data, "NAME_TAG")
#########################
# Read in the statistics file (INCORRECT VALUE FOR WICKLOW WEST IN 2015Q2 1590/310 herds restricted
file <- paste0(path, "RepublicOfIreland/Mbovis/HerdTbStatistics_2010-2019.csv") # source: https://statbank.cso.ie/px/pxeirestat/Database/eirestat/Animal%20Disease%20Statistics/Animal%20Disease%20Statistics_statbank.asp?sp=Animal%20Disease%20Statistics&Planguage=0&ProductID=DB_DA
statistics <- readTBStatisticsFile(file)
statistics[which(statistics$County == "WICKLOW W" & statistics$Statistic == "Herds Restricted Since 1st of January (Number)"),
"2015Q2"] <- NA
# Calculate the per county proportion test positive animals in most recent report - 2018Q3
summaryTables <- calculateSummaryStatisticsPerQuarter(statistics)
install.packages("phytools")
# Load libraries
library(ape)
library(grid)
set.seed(76263)
#### Create a random phylogeny and rotate a node ####
# Create a random phylogeny
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny
rotated <- rotat(tree, node=56)
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny
rotated <- rotate(tree, node=56)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
tanglePlot <- function(tree1, tree2, onlyIfDifferent=TRUE,
connectingLine.col="black",
connectingLine.lwd=1,
connectingLine.lty=1,
...){
# Get the current plotting margins
currentMar <- par()$mar
# Set the number of plots in window
currentMfrow <- par()$mfrow
par(mfrow=c(1,2))
# Set the plotting margin - leave space on right
par(mar=c(0,0,0,1))
# Plot phylogeny 1
plot.phylo(tree1, direction="rightwards", ...)
tree1TipCoordinates <- getTipCoordinates(tree1$tip.label)
# Set the plotting margin - leave space on right
par(mar=c(1,0,0,0))
# Plot phylogeny 2
plot.phylo(tree2, direction="leftwards", ...)
tree2TipCoordinates <- getTipCoordinates(tree2$tip.label)
# Plot lines between the phylogenies
plotLinesBetweenTips(tree1TipCoordinates, tree2TipCoordinates,
col=connectingLine.col,
lwd=connectingLine.lwd,
lty=connectingLine.lty,
onlyIfDifferent=onlyIfDifferent)
# Reset the plotting margins
par(mar=currentMar)
# Reset the number of plots in window
par(mfrow=currentMfrow)
}
plotLinesBetweenTips <- function(tipLocationsA, tipLocationsB,
col="black", lwd=1, lty=1,
onlyIfDifferent=TRUE){
pushViewport(viewport())
popViewport()
for(key in names(tipLocationsA)){
if(is.null(tipLocationsB[[key]])){
next
}
if(abs(tipLocationsA[[key]][4] - tipLocationsB[[key]][4]) > 1){
pushViewport(viewport())
grid.lines(x = c(tipLocationsA[[key]][1], tipLocationsB[[key]][1]),
y = c(tipLocationsA[[key]][2], tipLocationsB[[key]][2]),
gp = gpar(col=col, lty=lty, lwd=lwd))
popViewport()
}else if(onlyIfDifferent == FALSE){
pushViewport(viewport())
grid.lines(x = c(tipLocationsA[[key]][1], tipLocationsB[[key]][1]),
y = c(tipLocationsA[[key]][2], tipLocationsB[[key]][2]),
gp = gpar(col=col, lty=lty, lwd=lwd))
popViewport()
}
}
}
getTipCoordinates <- function(tipLabels){
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
tips <- list()
for(i in 1:length(tipLabels)){
tips[[as.character(tipLabels[i])]] <- c(grconvertX(lastPP$xx[i], "user", "ndc"),
grconvertY(lastPP$yy[i], "user", "ndc"),
lastPP$xx[i], lastPP$yy[i])
}
return(tips)
}
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
tiplabels
tiplabels()
tree$tip.label
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny
rotated <- rotate(tree, node=c("t36", "t37"))
#### Compare the random and rotated phylogeny ####
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
plot(tree)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
tanglePlot <- function(tree1, tree2, onlyIfDifferent=TRUE,
connectingLine.col="black",
connectingLine.lwd=1,
connectingLine.lty=1,
...){
# Get the current plotting margins
currentMar <- par()$mar
# Set the number of plots in window
currentMfrow <- par()$mfrow
par(mfrow=c(1,2))
# Set the plotting margin - leave space on right
par(mar=c(0,0,0,1))
# Plot phylogeny 1
plot.phylo(tree1, direction="rightwards", ...)
tree1TipCoordinates <- getTipCoordinates(tree1$tip.label)
# Set the plotting margin - leave space on right
par(mar=c(0,1,0,0))
# Plot phylogeny 2
plot.phylo(tree2, direction="leftwards", ...)
tree2TipCoordinates <- getTipCoordinates(tree2$tip.label)
# Plot lines between the phylogenies
plotLinesBetweenTips(tree1TipCoordinates, tree2TipCoordinates,
col=connectingLine.col,
lwd=connectingLine.lwd,
lty=connectingLine.lty,
onlyIfDifferent=onlyIfDifferent)
# Reset the plotting margins
par(mar=currentMar)
# Reset the number of plots in window
par(mfrow=currentMfrow)
}
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
tree
tree$edge.length
# Get the tip coordinates in the last phylogeny plot
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
lastPP
plotLineBetweenTips <- function(coordsA, coordsB,
col="black", lwd=1, lty=1){
# Open up the port to plot the current line
pushViewport(viewport())
# Plot a connecting line between tip on left and same tip on right
grid.lines(x = c(coordsA[1], coordsB[1]),
y = c(coordsA[2], coordsB[2]),
gp = gpar(col=col, lty=lty, lwd=lwd))
# Close the port
popViewport()
}
tipLocationsA <- getTipCoordinates(tree$tip.label)
names(tipLocationsA)
getTipCoordinates <- function(tipLabels){
# Get the tip coordinates in the last phylogeny plot
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
# Initialise a list to store the absolute coordinates on the plotting window
tips <- list()
# Store the absolute tree height
tips[["height"]] <- grconvertX(lastPP$x.lim[2], "user", "ndc")
# Examine each of the tips
for(i in 1:length(tipLabels)){
# Store the aboslute and relative coordinates for the current tip
tips[[as.character(tipLabels[i])]] <- c(grconvertX(lastPP$xx[i], "user", "ndc"),
grconvertY(lastPP$yy[i], "user", "ndc"),
lastPP$xx[i], lastPP$yy[i])
}
return(tips)
}
tipLocationsA <- getTipCoordinates(tree$tip.label)
names(tipLocationsA)
tipLocationsA$height
plotLineBetweenTips <- function(coordsA, coordsB,
col="black", lwd=1, lty=1, xOffset=0){
# Open up the port to plot the current line
pushViewport(viewport())
# Plot a connecting line between tip on left and same tip on right
grid.lines(x = c(coordsA[1]+xOffset, coordsB[1]-xOffset),
y = c(coordsA[2], coordsB[2]),
gp = gpar(col=col, lty=lty, lwd=lwd))
# Close the port
popViewport()
}
plotLinesBetweenTips <- function(tipLocationsA, tipLocationsB,
col="black", lwd=1, lty=1,
onlyIfDifferent=TRUE, offsetProp=NULL){
# Open up the port to allow lines to be added
pushViewport(viewport())
popViewport()
# Calculate the offset for the X positions
xOffset <- 0
if(is.null(offsetProp) == FALSE){
xOffset <- offsetProp * (tipLocationsA$height + tipLocationsB$height)
}
# Examines each of the tips on the left phylogeny
for(key in names(tipLocationsA)){
# Skip the tips that aren't in the right phylogeny or the absolute phylogeny height
if(is.null(tipLocationsB[[key]]) | key == "height"){
next
}
# Check if the tip location (Y coordinate) is different in the two phylogenies (using relative coordinates)
if(abs(tipLocationsA[[key]][4] - tipLocationsB[[key]][4]) > 1){
# Plot a connecting line between tip on left and same tip on right
plotLineBetweenTips(coordsA=tipLocationsA[[key]], coordsB=tipLocationsB[[key]],
col=col, lty=lty, lwd=lwd)
# Check if want to plot lines between tips regardless of if different
}else if(onlyIfDifferent == FALSE){
# Plot a connecting line between tip on left and same tip on right
plotLineBetweenTips(coordsA=tipLocationsA[[key]], coordsB=tipLocationsB[[key]],
col=col, lty=lty, lwd=lwd)
}
}
}
tanglePlot <- function(tree1, tree2, onlyIfDifferent=TRUE,
connectingLine.col="black",
connectingLine.lwd=1,
connectingLine.lty=1,
offsetProp=NULL, ...){
# Get the current plotting margins
currentMar <- par()$mar
# Set the number of plots in window
currentMfrow <- par()$mfrow
par(mfrow=c(1,2))
# Set the plotting margin - leave space on right
par(mar=c(0,0,0,1))
# Plot phylogeny 1
plot.phylo(tree1, direction="rightwards", ...)
tree1TipCoordinates <- getTipCoordinates(tree1$tip.label)
# Set the plotting margin - leave space on right
par(mar=c(0,1,0,0))
# Plot phylogeny 2
plot.phylo(tree2, direction="leftwards", ...)
tree2TipCoordinates <- getTipCoordinates(tree2$tip.label)
# Plot lines between the phylogenies
plotLinesBetweenTips(tree1TipCoordinates, tree2TipCoordinates,
col=connectingLine.col,
lwd=connectingLine.lwd,
lty=connectingLine.lty,
onlyIfDifferent=onlyIfDifferent,
offsetProp=offsetProp)
# Reset the plotting margins
par(mar=currentMar)
# Reset the number of plots in window
par(mfrow=currentMfrow)
}
plotLinesBetweenTips <- function(tipLocationsA, tipLocationsB,
col="black", lwd=1, lty=1,
onlyIfDifferent=TRUE, offsetProp=NULL){
# Open up the port to allow lines to be added
pushViewport(viewport())
popViewport()
# Calculate the offset for the X positions
xOffset <- 0
if(is.null(offsetProp) == FALSE){
xOffset <- offsetProp * (tipLocationsA$height + tipLocationsB$height)
}
# Examines each of the tips on the left phylogeny
for(key in names(tipLocationsA)){
# Skip the tips that aren't in the right phylogeny or the absolute phylogeny height
if(is.null(tipLocationsB[[key]]) | key == "height"){
next
}
# Check if the tip location (Y coordinate) is different in the two phylogenies (using relative coordinates)
if(abs(tipLocationsA[[key]][4] - tipLocationsB[[key]][4]) > 1){
# Plot a connecting line between tip on left and same tip on right
plotLineBetweenTips(coordsA=tipLocationsA[[key]], coordsB=tipLocationsB[[key]],
col=col, lty=lty, lwd=lwd)
# Check if want to plot lines between tips regardless of if different
}else if(onlyIfDifferent == FALSE){
# Plot a connecting line between tip on left and same tip on right
plotLineBetweenTips(coordsA=tipLocationsA[[key]], coordsB=tipLocationsB[[key]],
col=col, lty=lty, lwd=lwd)
}
}
}
plotLineBetweenTips <- function(coordsA, coordsB,
col="black", lwd=1, lty=1, xOffset=0){
# Open up the port to plot the current line
pushViewport(viewport())
# Plot a connecting line between tip on left and same tip on right
grid.lines(x = c(coordsA[1]+xOffset, coordsB[1]-xOffset),
y = c(coordsA[2], coordsB[2]),
gp = gpar(col=col, lty=lty, lwd=lwd))
# Close the port
popViewport()
}
getTipCoordinates <- function(tipLabels){
# Get the tip coordinates in the last phylogeny plot
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
# Initialise a list to store the absolute coordinates on the plotting window
tips <- list()
# Store the absolute tree height
tips[["height"]] <- grconvertX(lastPP$x.lim[2], "user", "ndc")
# Examine each of the tips
for(i in 1:length(tipLabels)){
# Store the aboslute and relative coordinates for the current tip
tips[[as.character(tipLabels[i])]] <- c(grconvertX(lastPP$xx[i], "user", "ndc"),
grconvertY(lastPP$yy[i], "user", "ndc"),
lastPP$xx[i], lastPP$yy[i])
}
return(tips)
}
# Create a random phylogeny
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny - with tip labels it
rotated <- rotate(tree, node=c("t36", "t37"))
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
# Set the seed
set.seed(76263)
#### Create a random phylogeny and rotate a node ####
# Create a random phylogeny
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny - with tip labels it
rotated <- rotate(tree, node=c("t36", "t37"))
#### Compare the random and rotated phylogeny ####
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
# Set the seed
set.seed(76263)
#### Create a random phylogeny and rotate a node ####
# Create a random phylogeny
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny - with tip labels it
rotated <- rotate(tree, node=c("t36", "t37"))
#### Compare the random and rotated phylogeny ####
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
# Set the seed
set.seed(76263)
#### Create a random phylogeny and rotate a node ####
# Create a random phylogeny
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny - with tip labels it
rotated <- rotate(tree, node=c("t36", "t37"))
#### Compare the random and rotated phylogeny ####
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
plot(tree)
# Set the seed
set.seed(76263)
#### Create a random phylogeny and rotate a node ####
# Create a random phylogeny
tree <- rtree(n=50, rooted=TRUE)
# Rotate one of the nodes in the phylogeny - with tip labels it
rotated <- rotate(tree, node=c("t39", "t46"))
#### Compare the random and rotated phylogeny ####
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE, offsetProp=0.1)
tanglePlot <- function(tree1, tree2, onlyIfDifferent=TRUE,
connectingLine.col="black",
connectingLine.lwd=1,
connectingLine.lty=1,
offsetProp=NULL, ...){
# Get the current plotting margins
currentMar <- par()$mar
# Set the number of plots in window
currentMfrow <- par()$mfrow
par(mfrow=c(1,2))
# Set the plotting margin - leave space on right
par(mar=c(0,0,0,1))
# Plot phylogeny 1
plot.phylo(tree1, direction="rightwards", ...)
tree1TipCoordinates <- getTipCoordinates(tree1$tip.label)
# Set the plotting margin - leave space on right
par(mar=c(0,1,0,0))
# Plot phylogeny 2
plot.phylo(tree2, direction="leftwards", ...)
tree2TipCoordinates <- getTipCoordinates(tree2$tip.label)
# Plot lines between the phylogenies
plotLinesBetweenTips(tree1TipCoordinates, tree2TipCoordinates,
col=connectingLine.col,
lwd=connectingLine.lwd,
lty=connectingLine.lty,
onlyIfDifferent=onlyIfDifferent,
offsetProp=offsetProp)
# Reset the plotting margins
par(mar=currentMar)
# Reset the number of plots in window
par(mfrow=currentMfrow)
}
plotLinesBetweenTips <- function(tipLocationsA, tipLocationsB,
col="black", lwd=1, lty=1,
onlyIfDifferent=TRUE, offsetProp=NULL){
# Open up the port to allow lines to be added
pushViewport(viewport())
popViewport()
# Calculate the offset for the X positions
xOffset <- 0
if(is.null(offsetProp) == FALSE){
xOffset <- offsetProp * (tipLocationsA$height + tipLocationsB$height)
}
# Examines each of the tips on the left phylogeny
for(key in names(tipLocationsA)){
# Skip the tips that aren't in the right phylogeny or the absolute phylogeny height
if(is.null(tipLocationsB[[key]]) | key == "height"){
next
}
# Check if the tip location (Y coordinate) is different in the two phylogenies (using relative coordinates)
if(abs(tipLocationsA[[key]][4] - tipLocationsB[[key]][4]) > 1){
# Plot a connecting line between tip on left and same tip on right
plotLineBetweenTips(coordsA=tipLocationsA[[key]], coordsB=tipLocationsB[[key]],
col=col, lty=lty, lwd=lwd, xOffset=xOffset)
# Check if want to plot lines between tips regardless of if different
}else if(onlyIfDifferent == FALSE){
# Plot a connecting line between tip on left and same tip on right
plotLineBetweenTips(coordsA=tipLocationsA[[key]], coordsB=tipLocationsB[[key]],
col=col, lty=lty, lwd=lwd, xOffset=xOffset)
}
}
}
plotLineBetweenTips <- function(coordsA, coordsB,
col="black", lwd=1, lty=1, xOffset=0){
# Open up the port to plot the current line
pushViewport(viewport())
# Plot a connecting line between tip on left and same tip on right
grid.lines(x = c(coordsA[1]+xOffset, coordsB[1]-xOffset),
y = c(coordsA[2], coordsB[2]),
gp = gpar(col=col, lty=lty, lwd=lwd))
# Close the port
popViewport()
}
getTipCoordinates <- function(tipLabels){
# Get the tip coordinates in the last phylogeny plot
lastPP <- get("last_plot.phylo", envir = .PlotPhyloEnv)
# Initialise a list to store the absolute coordinates on the plotting window
tips <- list()
# Store the absolute tree height
tips[["height"]] <- grconvertX(lastPP$x.lim[2], "user", "ndc")
# Examine each of the tips
for(i in 1:length(tipLabels)){
# Store the aboslute and relative coordinates for the current tip
tips[[as.character(tipLabels[i])]] <- c(grconvertX(lastPP$xx[i], "user", "ndc"),
grconvertY(lastPP$yy[i], "user", "ndc"),
lastPP$xx[i], lastPP$yy[i])
}
return(tips)
}
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE, offsetProp=0.1)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE, offsetProp=0.01)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE, offsetProp=0.05)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE, offsetProp=0.01)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=FALSE, offsetProp=0.005)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=TRUE, offsetProp=0.01)
tanglePlot(tree, rotated, connectingLine.col="red",
connectingLine.lty=2, show.tip.label=TRUE, offsetProp=0.02)
basicPlotteR::addSNPScale(size=0.01)
basicPlotteR::addSNPScale("bottom", size=0.01)
basicPlotteR::addSNPScale(location="bottom", size=0.01)
basicPlotteR::addSNPScale(position = "bottom", size=0.01)
